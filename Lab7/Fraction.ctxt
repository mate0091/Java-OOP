#BlueJ class context
comment0.params=
comment0.target=Fraction()
comment0.text=\r\n\ Constructor\ for\ Fraction\r\n\ creates\ a\ unitary\ fraction\r\n
comment1.params=n\ d
comment1.target=Fraction(int,\ int)
comment1.text=\r\n\ Constructor\ for\ Fractionm\r\n\ @param\ n\ -\ numerator,\ integer\r\n\ @param\ m\ -\ denominator,\ integer\r\n\ By\ convention,\ the\ sign\ is\ kept\ with\ the\ numerator;\ \r\n\ thus,\ negative\ deniminators\ are\ not\ legal\ \r\n
comment10.params=f
comment10.target=boolean\ equals(Fraction)
comment10.text=\r\n\ Checks\ wether\ this\ fraction\ is\ equal\ to\ another\r\n\ @param\ fraction\ to\ check\ if\ equal\ with\r\n\ @return\ true\ if\ equal;\ false\ otherwise\r\n
comment11.params=
comment11.target=int\ getNumerator()
comment12.params=
comment12.target=int\ getDenominator()
comment13.params=
comment13.target=java.lang.String\ toString()
comment13.text=\r\n\ @retruns\ a\ String\ representation\ of\ this\ fraction\r\n
comment14.params=o
comment14.target=int\ compareTo(java.lang.Object)
comment14.text=\r\n\ Compares\ this\ fraction\ to\ the\ one\ given\ as\ an\ argument\r\n\ @param\ o\ -\ fraction\ to\ compare\ to\r\n\ @return\ 1\ if\ this\ is\ greater;\ 0\ if\ equal;\ -1\ if\ less\r\n
comment15.params=f
comment15.target=Fraction\ simplify(Fraction)
comment15.text=\r\n\ Simplifies\ the\ fraction\ given\ as\ an\ argument\ and\ returns\ it\r\n\ Does\ not\ change\ original\ fraction\r\n\ @param\ f\ -\ fraction\ to\ simplify\r\n\ @return\ reference\ to\ simplified\ fraction\r\n
comment16.params=
comment16.target=Numeric\ copy()
comment17.params=
comment17.target=Fraction\ getZero()
comment18.params=a\ b
comment18.target=int\ getGCD(int,\ int)
comment18.text=\r\n\ Greatest\ common\ divisor\ of\ two\ integers\ a\ and\ b\r\n
comment19.params=a\ b
comment19.target=int\ getLCM(int,\ int)
comment19.text=\r\n\ Least\ common\ multiple\ of\ two\ integers\ a\ and\ b\r\n
comment2.params=f
comment2.target=Fraction(Fraction)
comment2.text=\r\n\ Copy\ constructor\ for\ Fraction\r\n\ Creates\ a\ duplicate\ of\ the\ fraction\ givenas\ an\ argument\r\n\ @param\ f\ -\ Fraction\ to\ duplicate\r\n
comment3.params=f
comment3.target=Numeric\ add(Numeric)
comment3.text=\r\n\ Adds\ this\ fraction\ with\ the\ one\ given\ as\ an\ argument\r\n\ and\ accumulates\ the\ result\ in\ this\ fraction\r\n\ @param\ f\ -\ fraction\ to\ add\ with\r\n
comment4.params=f
comment4.target=Numeric\ subtract(Numeric)
comment4.text=\r\n\ Subtracts\ from\ this\ fraction\ the\ one\ given\ as\ an\ argument\r\n\ and\ accumulates\ the\ result\ in\ this\ fraction\r\n\ @param\ f\ -\ fraction\ to\ subtract\ from\ this\ one\r\n
comment5.params=f
comment5.target=Numeric\ multiply(Numeric)
comment5.text=\r\n\ Multiplies\ this\ fraction\ by\ the\ one\ given\ as\ an\ argument\r\n\ and\ accumulates\ the\ result\ in\ this\ fraction\r\n\ @param\ f\ -\ fraction\ to\ multiply\ with\r\n
comment6.params=f
comment6.target=Numeric\ divide(Numeric)
comment6.text=\r\n\ Divides\ this\ fraction\ through\ the\ one\ given\ as\ an\ argument\r\n\ and\ accumulates\ the\ result\ in\ this\ fraction\r\n\ @param\ f\ -\ fraction\ to\ divide\ to\r\n
comment7.params=
comment7.target=void\ simplify()
comment7.text=\r\n\ Simplifies\ this\ fraction\r\n
comment8.params=
comment8.target=void\ swap()
comment8.text=\ \r\n\ Swaps\ numerator\ with\ denominator;\ thus\ inverts\ fraction\r\n
comment9.params=
comment9.target=double\ toDouble()
comment9.text=\r\n\ Returns\ the\ real\ equivalent\ of\ this\ fraction\r\n\ @return\ a\ double\ approx.\ equal\ to\ this\ fraction\r\n
numComments=20
